"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _2 = _interopRequireWildcard(require("../.."));

var _imageElement = require("../../lib/basedriver/image-element");

var _constants = require("../../lib/constants");

var _sinon = _interopRequireDefault(require("sinon"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

const defRect = {
  x: 100,
  y: 110,
  width: 50,
  height: 25
};
const defTemplate = 'iVBORasdf';
describe('ImageElement', function () {
  const driver = new _2.default();
  describe('.size', function () {
    it('should return the width and height of the image el', function () {
      const el = new _2.ImageElement(defTemplate, defRect);
      el.size.should.eql({
        width: defRect.width,
        height: defRect.height
      });
    });
  });
  describe('.location', function () {
    it('should return the location of the image el', function () {
      const el = new _2.ImageElement(defTemplate, defRect);
      el.location.should.eql({
        x: defRect.x,
        y: defRect.y
      });
    });
  });
  describe('.center', function () {
    it('should return the center location of the image el', function () {
      const el = new _2.ImageElement(defTemplate, defRect);
      el.center.should.eql({
        x: defRect.x + defRect.width / 2,
        y: defRect.y + defRect.height / 2
      });
    });
  });
  describe('.asElement', function () {
    it('should get the webdriver object representation of the element', function () {
      const el = new _2.ImageElement(defTemplate, defRect);
      el.asElement('ELEMENT').ELEMENT.should.match(/^appium-image-el/);
    });
  });
  describe('.equals', function () {
    it('should say two image elements with same rect are equal', function () {
      const el1 = new _2.ImageElement('foo', defRect);
      const el2 = new _2.ImageElement('bar', defRect);
      el1.equals(el2).should.be.true;
      el2.equals(el1).should.be.true;
    });
    it('should say two image elements with different rect are not equal', function () {
      const el1 = new _2.ImageElement(defTemplate, { ...defRect,
        x: 0
      });
      const el2 = new _2.ImageElement(defTemplate, defRect);
      el1.equals(el2).should.be.false;
      el2.equals(el1).should.be.false;
    });
  });
  describe('.click', function () {
    it('should reject an invalid tap strategy', async function () {
      const d = new _2.default();
      const el = new _2.ImageElement(defTemplate, defRect);
      await d.settings.update({
        imageElementTapStrategy: 'bad'
      });
      await el.click(d).should.eventually.be.rejectedWith(/Incorrect imageElementTapStrategy/);
    });
    it('should try to check for image element staleness, and throw if stale', async function () {
      const d = new _2.default();

      _sinon.default.stub(d, 'findByImage').throws();

      const el = new _2.ImageElement(defTemplate, defRect);
      await d.settings.update({
        checkForImageElementStaleness: true,
        autoUpdateImageElementPosition: false
      });
      await el.click(d).should.eventually.be.rejectedWith(/no longer attached/);
      await d.settings.update({
        checkForImageElementStaleness: false,
        autoUpdateImageElementPosition: true
      });
      await el.click(d).should.eventually.be.rejectedWith(/no longer attached/);
    });
    it('should auto-update element position if requested', async function () {
      const d = new _2.default();
      d.performActions = _lodash.default.noop;

      _sinon.default.stub(d, 'performActions');

      const el = new _2.ImageElement(defTemplate, defRect);
      const newRect = { ...defRect,
        x: defRect.x + 10,
        y: defRect.y + 5
      };
      const elPos2 = new _2.ImageElement(defTemplate, newRect);

      _sinon.default.stub(d, 'findByImage').returns(elPos2);

      await d.settings.update({
        autoUpdateImageElementPosition: true
      });
      el.rect.should.not.eql(newRect);
      await el.click(d);
      el.rect.should.eql(newRect);
    });
    it('should tap the center of an element using w3c actions by default', async function () {
      const d = new _2.default();
      d.performActions = _lodash.default.noop;

      const actionStub = _sinon.default.stub(d, 'performActions');

      const el = new _2.ImageElement(defTemplate, defRect);
      await d.settings.update({
        checkForImageElementStaleness: false
      });
      await el.click(d);
      const pointerMoveAction = actionStub.args[0][0][0].actions[0];
      pointerMoveAction.x.should.equal(el.center.x);
      pointerMoveAction.y.should.equal(el.center.y);
    });
    it('should fall back to touchactions if w3c actions do not exist on driver', async function () {
      const d = new _2.default();
      d.performTouch = _lodash.default.noop;

      const actionStub = _sinon.default.stub(d, 'performTouch');

      const el = new _2.ImageElement(defTemplate, defRect);
      await d.settings.update({
        checkForImageElementStaleness: false
      });
      await el.click(d);
      const action = actionStub.args[0][0][0].options;
      action.x.should.equal(el.center.x);
      action.y.should.equal(el.center.y);
    });
    it('should use touchactions if requested', async function () {
      const d = new _2.default();
      d.performActions = _lodash.default.noop;

      const w3cStub = _sinon.default.stub(d, 'performActions');

      d.performTouch = _lodash.default.noop;

      const touchStub = _sinon.default.stub(d, 'performTouch');

      const el = new _2.ImageElement(defTemplate, defRect);
      await d.settings.update({
        checkForImageElementStaleness: false,
        imageElementTapStrategy: 'touchActions'
      });
      await el.click(d);
      const action = touchStub.args[0][0][0].options;
      action.x.should.equal(el.center.x);
      action.y.should.equal(el.center.y);
      w3cStub.callCount.should.eql(0);
    });
    it('should throw if driver does not implement any type of action', async function () {
      const d = new _2.default();
      const el = new _2.ImageElement(defTemplate, defRect);
      await d.settings.update({
        checkForImageElementStaleness: false
      });
      await el.click(d).should.eventually.be.rejectedWith(/did not implement/);
    });
  });
  describe('#execute', function () {
    const imgEl = new _2.ImageElement(defTemplate, defRect, 0, 'aGFwcHkgdGVzdGluZw==');

    const clickStub = _sinon.default.stub(imgEl, 'click');

    before(function () {
      driver._imgElCache.set(imgEl.id, imgEl);

      clickStub.returns(true);
    });
    after(function () {
      driver._imgElCache.reset();

      clickStub.restore();
    });
    it('should reject executions on elements not in the cache', async function () {
      await _2.ImageElement.execute(driver, 'click', 'appium-image-element-foo').should.eventually.be.rejectedWith(/element could not be located/);
    });
    it('should reject executions for unsupported commands', async function () {
      await _2.ImageElement.execute(driver, 'foobar', imgEl.id).should.eventually.be.rejectedWith(/not yet been implemented/);
    });
    it('should get displayed status of element', async function () {
      await _2.ImageElement.execute(driver, 'elementDisplayed', imgEl.id).should.eventually.be.true;
    });
    it('should get size of element', async function () {
      await _2.ImageElement.execute(driver, 'getSize', imgEl.id).should.eventually.eql({
        width: defRect.width,
        height: defRect.height
      });
    });
    it('should get location of element', async function () {
      await _2.ImageElement.execute(driver, 'getLocation', imgEl.id).should.eventually.eql({
        x: defRect.x,
        y: defRect.y
      });
    });
    it('should get location in view of element', async function () {
      await _2.ImageElement.execute(driver, 'getLocation', imgEl.id).should.eventually.eql({
        x: defRect.x,
        y: defRect.y
      });
    });
    it('should get rect of element', async function () {
      await _2.ImageElement.execute(driver, 'getElementRect', imgEl.id).should.eventually.eql(defRect);
    });
    it('should get score of element', async function () {
      await _2.ImageElement.execute(driver, 'getAttribute', imgEl.id, 'score').should.eventually.eql(0);
    });
    it('should get visual of element', async function () {
      await _2.ImageElement.execute(driver, 'getAttribute', imgEl.id, 'visual').should.eventually.eql('aGFwcHkgdGVzdGluZw==');
    });
    it('should get null as visual of element by default', async function () {
      const imgElement = new _2.ImageElement(defTemplate, defRect);

      driver._imgElCache.set(imgElement.id, imgElement);

      await _2.ImageElement.execute(driver, 'getAttribute', imgElement.id, 'visual').should.eventually.eql(null);
    });
    it('should not get other attribute', async function () {
      await _2.ImageElement.execute(driver, 'getAttribute', imgEl.id, 'content-desc').should.eventually.rejectedWith('Method has not yet been implemented');
    });
    it('should click element', async function () {
      await _2.ImageElement.execute(driver, 'click', imgEl.id).should.eventually.be.true;
    });
  });
});
describe('image element LRU cache', function () {
  it('should accept and cache image elements', function () {
    const el1 = new _2.ImageElement(defTemplate, defRect);
    const el2 = new _2.ImageElement(defTemplate, defRect);
    const cache = (0, _imageElement.makeImageElementCache)();
    cache.set(el1.id, el1);
    el1.equals(cache.get(el1.id)).should.be.true;
    _lodash.default.isUndefined(cache.get(el2.id)).should.be.true;
    cache.has(el1.id).should.be.true;
    cache.has(el2.id).should.be.false;
  });
  it('once cache reaches max size, should eject image elements', function () {
    const el1 = new _2.ImageElement(defTemplate, defRect);
    const el2 = new _2.ImageElement(defTemplate, defRect);
    const cache = (0, _imageElement.makeImageElementCache)(defTemplate.length + 1);
    cache.set(el1.id, el1);
    cache.has(el1.id).should.be.true;
    cache.set(el2.id, el2);
    cache.has(el2.id).should.be.true;
    cache.has(el1.id).should.be.false;
  });
});
describe('getImgElFromArgs', function () {
  it('should return the image element id from json obj in args', function () {
    const imgEl = `${_constants.IMAGE_ELEMENT_PREFIX}foo`;
    const args = [1, 'foo', imgEl];
    (0, _imageElement.getImgElFromArgs)(args).should.eql(imgEl);
  });
  it('should not return anything if image element id not in args', function () {
    const args = [1, 'foo'];
    _lodash.default.isUndefined((0, _imageElement.getImgElFromArgs)(args)).should.be.true;
  });
  it('should not find image element id in anything but prefix', function () {
    const notImgEl = `foo${_constants.IMAGE_ELEMENT_PREFIX}`;
    const args = [1, 'foo', notImgEl];
    _lodash.default.isUndefined((0, _imageElement.getImgElFromArgs)(args)).should.be.true;
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
